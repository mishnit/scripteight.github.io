---
- title: Welcome to SCRIPT-8's lesson modes.
  shortTitle: Introduction
  slides:
  - text:
    - We are going to learn how to make games!
    - Each lesson will introduce a new concept.
  - text:
    - We will learn to draw characters and make them move.
    - We will learn to make worlds for our characters.
    - Then we'll add enemies and a bit of music, of course.
  - text:
    - You'll find the list of lessons in HELP.
    - Click HELP in the top menu.
    requirements:
      screen: HELP
  - screen: HELP
    text:
    - All the lessons are listed here, at the top.
    - Alright. That's enough introduction for now.
    - Let's start!
- title: Hello world!
  slides:
  - text:
    - In this lesson we will make a cassette that says "Hello world!".
    - This might not be too exciting, but all good stories start at the beginning.
    - So let's begin.
  - text:
    - "Before we get going: make sure to record any unsaved changes."
    - The lesson will insert a blank cassette.
    - Click NEXT when you're ready.
    newGameOnNext: true
  - game: ''
    text:
    - We need to go to the CODE screen to write our code.
    - Click CODE in the top menu.
    requirements:
      screen: CODE
  - screen: CODE
    text:
    - 'Enter the following lines:'
    - XXdraw = () => {
    - XX  print(42, 60, 'Hello world!', 0)
    - XX}
  - game: |-
      draw = () => {
        print(42, 60, 'Hello world!', 0)
      }
    screen: CODE
    text:
    - Your first SCRIPT-8 cassette!
    - You should see 'Hello world!' drawn on the right.
    - If not it's because you're on a small screen.
  - screen: CODE
    text:
    - But that's OK. You can see the cassette full-screen in RUN.
    - Click RUN now. It might show up as RU if you're on a small screen.
    requirements:
      screen: RUN
  - text:
    - This is also what your friends will see when they load your cassette.
  - text:
    - Speaking of which, save it! This is, after all, the beginning of your story.
    - Mouse over CASSETTE, on the menu, and click RECORD.
  - text:
    - You'll notice the URL changed.
    - It's your cassette's URL now.
    - You can share it with family and friends.
  - text:
    - In the next lesson we'll try to understand what we typed here.
    - It is always good to know what is going on.
    - Good-bye for now. See you soon!
- title: Hello many worlds!
  slides:
  - text:
    - In the previous lesson we learned how to draw letters.
    - Let's try to understand the code a bit. Then we can do more.
  - text:
    - "Before we get going: make sure to record any unsaved changes."
    - The lesson will insert a blank cassette.
    - Click NEXT when you're ready.
    newGameOnNext: true
  - game: ''
    text:
    - Let's go over to the CODE screen.
    - Click CODE in the top menu.
    requirements:
      screen: CODE
  - screen: CODE
    text:
    - Alright. Do you remember the 'Hello world!' code?
    - Enter it now. It's our starting point.
    - Don't remember it? That's OK. I'll do it for you. Click NEXT.
  - screen: CODE
    game: |-
      draw = () => {
        print(42, 60, 'Hello world!', 0)
      }
    text:
    - There are two functions here, 'draw' and 'print'.
    - SCRIPT-8 calls the 'draw' function 60 times per second.
    - It's a very important function.
    - It's part of what some call the game loop.
  - screen: CODE
    game: SAME
    text:
    - The other function, 'print', prints text to the screen.
    - 'It takes four parameters: x, y, text, and color.'
    - The first two, x and y, can be any integers from 0 to 127.
  - screen: CODE
    game: SAME
    text:
    - SCRIPT-8's resolution is 128px by 128px.
    - If you draw something at x = 128, well, that's past the right edge.
    - So you won't see it.
  - screen: CODE
    game: SAME
    text:
    - In fact, let's try that now. Change the first two numbers to something else.
    - If you're on a small screen, remember to click RUN to see your work.
    - Oh, and if things don't look right... that's OK. I'll explain.
  - text:
    - So. Did you try changing the numbers? And did your screen get all garbled?
    - That is probably not what you expected.
    - It looks like the text smeared all over itself. Not good.
    - Go back to CODE so we can fix this.
    requirements:
      screen: CODE
  - screen: CODE
    text:
    - Remember how SCRIPT-8 calls 'draw' 60 times a second?
    - That explains this glitch. SCRIPT-8 drew your text multiple times.
    - But it didn't clear the screen between each draw.
  - screen: CODE
    text:
    - SCRIPT-8 drew your texts on top of each other. Like you told it to.
    - Well. Let's tell it to clear the screen before every draw!
  - screen: CODE
    text:
    - 'Add ''clear()'' at the beginning of your function. Like this:'
    - XXdraw = () => {
    - XX  clear()
    - XX  print(8, 8, 'Hello world!', 0)
    - XX}
  - screen: CODE
    text:
    - And now you can change the x or y, and the text will be drawn fresh every time.
    - Great.
    - 'We still haven''t talked about the last parameter: color.'
  - text:
    - It can be any integer from 0 to 7.
    - That's because there are 8 colors in SCRIPT-8.
    - Change the color. Experiment. Oh. What happens if you enter... a 9?
  - text:
    - It still drew something. Looks like... a 9 is like the color 1.
    - And 18 is the color 2. Try it.
  - text:
    - So, the color numbers seem to wrap around, in groups of 8.
    - SCRIPT-8 does this by design. It can be useful in certain situations.
    - This is also known as modular arithmetic.
  - text:
    - This lesson is titled "Hello many worlds!" but we haven't taken care of that.
    - Can you guess how to fill the screen with 'Hello world!'? I'll do it for you.
  - game: |-
      draw = () => {
        clear()
        print(0, 0, 'Hello world!', 0)
        print(8, 8, 'Hello world!', 1)
        print(16, 16, 'Hello world!', 2)
        print(24, 24, 'Hello world!', 3)
        print(32, 32, 'Hello world!', 4)
        print(40, 40, 'Hello world!', 5)
        print(48, 48, 'Hello world!', 6)
        print(56, 56, 'Hello world!', 5)
        print(64, 64, 'Hello world!', 4)
        print(72, 72, 'Hello world!', 2)
        print(80, 80, 'Hello world!', 1)
        print(88, 88, 'Hello world!', 0)
        print(96, 96, 'Hello world!', 1)
        print(104, 104, 'Hello world!', 2)
        print(112, 112, 'Hello world!', 3)
        print(120, 120, 'Hello world!', 4)
      }
    screen: CODE
    text:
    - OK. We have reached the end. I hope you learned something new.
    - The next lesson will be about SCRIPT-8's magical number slider.
    - Are you curious? I would be. See you in the next one!
- title: The magical number slider
  slides:
  - text:
    - This lesson has a promising name, don't you think?
    - But first we must take care of something important.
  - text:
    - "Before we get going: make sure to record any unsaved changes."
    - The lesson will insert a blank cassette.
    - Click NEXT when you're ready.
    newGameOnNext: true
  - game: ''
    screen: CODE
    text:
    - Do you remember the last slide from our previous lesson? With all the 'Hello World!'s?
    - See if you can add that code here.
    - Don't worry if you forgot. I'll do it for you.
  - screen: CODE
    game: |-
      draw = () => {
        clear()
        print(0, 0, 'Hello world!', 0)
        print(8, 8, 'Hello world!', 1)
        print(16, 16, 'Hello world!', 2)
        print(24, 24, 'Hello world!', 3)
        print(32, 32, 'Hello world!', 4)
        print(40, 40, 'Hello world!', 5)
        print(48, 48, 'Hello world!', 6)
        print(56, 56, 'Hello world!', 5)
        print(64, 64, 'Hello world!', 4)
        print(72, 72, 'Hello world!', 2)
        print(80, 80, 'Hello world!', 1)
        print(88, 88, 'Hello world!', 0)
        print(96, 96, 'Hello world!', 1)
        print(104, 104, 'Hello world!', 2)
        print(112, 112, 'Hello world!', 3)
        print(120, 120, 'Hello world!', 4)
      }
    text:
    - Pay close attention to all the `print` lines.
    - Isn't there a lot lot of repetition?
    - We can do better.
  - text:
    - Can you improve this using loops?
    - (Remember SCRIPT-8 cassettes are written in JavaScript).
    - I'll show you one way.
  - screen: CODE
    text:
    - This code uses a `for` loop to print 10 lines.
    - Not bad. We got rid of the duplication.
    - But there's a better way.
    game: |-
      draw = () => {
        clear()
        let i
        for (i = 0; i < 10; i++) {
          print(8 * i, 8 * i, 'Hello world!', i % 7)
        }
      }
  - text:
    - SCRIPT-8 has a number of functions to help us do common tasks, such as looping over things.
    - 'One of them is `range`:'
    - XXrange([start=0], end, [step=1])
    game: SAME
  - screen: CODE
    text:
    - Here it is in action, next to the previous `for` code.
    - Much cleaner. No need to keep track of counter variables.
    - Now, about that magical slider.
    game: |-
      draw = () => {
        clear()
      //   let i
      //   for (i = 0; i < 10; i++) {
      //     print(8 * i, 8 * i, 'Hello world!', i % 7)
      //   }
        const lines = 10
        range(lines).forEach(i => {
          print(8 * i, 8 * i, 'Hello world!', i % 7)
        })
      }
  - screen: CODE
    text:
    - Actually, just a moment (sorry!).
    - See how the 'Hello World!'s don't go all the way to the bottom?
    - Let's fix that. Change the 10 (in line 7) until the text goes all the way down.
    game: SAME
  - screen: CODE
    text:
    - You probably chose 16, right?
    - And how exactly did you do that?
    - You probably deleted 10, then typed 11. Deleted 11, typed 12.
    - Deleted 12, typed 13. Deleted 13, typed 14. Deleted 14, typed 15. Deleted 15, typed 16.
  - text:
    - That's also a lot of of duplication.
    - All that typing just to find the right integer.
    - If only there were an easier way to do this.
  - screen: CODE
    text:
    - Do something for me. Click on the number 10 above.
    - And then, on your keyboard, hold the Shift key (or Command, if you're on a Mac.)
    - You see that slider? With the square in the middle?
    - Drag that square to the right. And watch the cassette on the right.
    game: DEL2-5
  - text:
    - THE MAGICAL NUMBER SLIDER.
    - This lesson has come to an end.
    - Don't you wish your text editor had magical sliders?
- title: Spinning squares
  slides:
  - text:
    - In this lesson we will learn how to draw 'Hello World!' KIDDING.
    - How about something more exciting. How about squares? Spinning squares?
    - Let's get started.
  - text:
    - "Before we get going: make sure to record any unsaved changes."
    - The lesson will insert a blank cassette.
    - Click NEXT when you're ready.
    newGameOnNext: true
  - text:
    - SCRIPT-8 has various drawing functions. They're all listed in HELP.
    - "One of them is `rectStroke`:"
    - XXrectStroke(x, y, width, height, [color=0])
    screen: CODE
    game: ''
  - text:
    - Can you use `rectStroke` to draw eight concentric squares?
    - Try for a bit. If you're stuck, I'll do it for you. Click NEXT.
  - text:
    - Oops, sorry! That doesn't look quite right.
    - There's eight squares, but they all start on the same xy spot.
    - Can you fix it? I'll also try.
    screen: CODE
    game: |-
      draw = () => {
        clear()
        range(8).forEach(i => {
          const width = 8 * i
          const height = 8 * i
          const x = 64
          const y = 64
          rectStroke(x, y, width, height)
        })
      }
  - text:
    - Good. Every new square needs to start a bit further up and to the left.
    - Before we move on, there's a bit of duplication here. You see it?
    - Let's fix that.
    linesToHighlight: 5-6
    screen: CODE
    game: |-
      REP5-6
          const x = 64 - width / 2
          const y = 64 - height / 2
  - text:
    - Better. One final thing. The colors are all the same.
    - Can you change that?
    linesToHighlight: 3-4
    screen: CODE
    game: |-
      REP3-7
          const side = 8 * i
          const xy = 64 - side / 2
          rectStroke(xy, xy, side, side)
  - text:
    - If we would have set color to `i`, the last square would be invisible.
    - Hence the use of the modulus operator.
    linesToHighlight: 5-5
    screen: CODE
    game: |-
      REP5-5
          const color = i % 7
          rectStroke(xy, xy, side, side, color)
  - text:
    - Now, this lesson is titled spinning squares. And we can't rotate a square using `rectStroke`.
    - "We'll use `polyStroke` for that:"
    - XXpolyStroke(points, [rotate, [x, y]], color)
  - text:
    - "`polyStroke` draws a closed polygon as defined by an array of points."
    - Let me show you. I'll draw one square using `polyStroke`.
    screen: CODE
    game: SAME
  - text:
    - Note you don't need to go back to the start. `polyStroke` closes the polygon.
    screen: CODE
    game: |-
      draw = () => {
        clear()
        const topLeft = [36, 36]
        const topRight = [91, 36]
        const bottomRight = [91, 91]
        const bottomLeft = [36, 91]
        polyStroke([topLeft, topRight, bottomRight, bottomLeft], 0)
      }
  - text:
    - We can rotate a polygon using `polyStroke`.
    - Set the rotation angle (in degrees) after points.
    - "For example, I'll rotate this rectangle by 5 degrees:"
    screen: CODE
    game: SAME
  - text:
    - You can also specify a rotation point. We won't go into that, but consult HELP for more information.
    - Back to our squares. Can you draw eight squares using `polyStroke`?
    linesToHighlight: 6-7
    screen: CODE
    game: |-
      REP6-6
        const angle = 5
        polyStroke([topLeft, topRight, bottomRight, bottomLeft], angle, 0)
  - text:
    - Looking good. But how do we make the squares spin?
    - "This is where `update` comes in, another `game loop` function. SCRIPT-8 executes it before `draw`:"
    - XXupdate(state, input, elapsed)
    screen: CODE
    game: |-
      draw = () => {
        clear()
        range(8).forEach(i => {
          const angle = 5
          const halfSide = 8 * i / 2
          const topLeft = [64 - halfSide, 64 - halfSide]
          const topRight = [64 + halfSide, 64 - halfSide]
          const bottomRight = [64 + halfSide, 64 + halfSide]
          const bottomLeft = [64 - halfSide, 64 + halfSide]
          const color = i % 7
          polyStroke([topLeft, topRight, bottomRight, bottomLeft], angle, color)
        })
      }
  - text:
    - "`elapsed` is how many milliseconds passed since the last `update` call."
    - Ignore `input` for now. We'll talk about it in a future lesson.
    - Now, see that `state` parameter?
    - XXupdate(state, input, elapsed)
    linesToHighlight: 0-1
    screen: CODE
    game: |-
      REP0-0
      update = (state, input, elapsed) => {
      }

      draw = () => {
  - text:
    - SCRIPT-8 is a state-based engine. You initialize the game's state in `init`.
    - Then, during every `update`, modify the state as needed.
    - And draw your game in `draw`, which receives one parameter, `state`.
    linesToHighlight: 3-3
    game: |-
      REP3-3
      draw = (state) => {
  - text:
    - That's the game loop! Nothing to it.
    - I've added `init`. It's empty now. What do we want to put in there?
    - How about our squares' rotation angle?
    linesToHighlight: 0-1
    screen: CODE
    game: |-
      REP0-0
      init = state => {
      }

      update = (state, input, elapsed) => {
  - text:
    - Good idea.
    - We also need to update `draw`.
    linesToHighlight: 1-1
    screen: CODE
    game: |-
      ADD1
        state.angle = 5 // the rotation angle
  - text:
    - Notice how we're not declaring `angle` inside `draw`.
    - Instead, we'll get it from `state`.
    linesToHighlight: 9-10
    screen: CODE
    game: |-
      REP9-10
        const { angle } = state
        range(8).forEach(i => {
  - text:
    - Ready for the final part?
    - We need to make them spin. Can you guess how to do that?
    - "Hint: change the angle in `update`."
    screen: CODE
    game: SAME
  - text:
    - Ta-dah!
    - Isn't SCRIPT-8 fun?
    - See you in the next lesson.
    linesToHighlight: 5-5
    screen: CODE
    game: |-
      ADD5
        state.angle = state.angle + elapsed / 10
- title: Swirly squares
  slides:
  - text:
    - If you were here for the previous lesson, you'll remember we drew eight concentric squares.
    - And then we made them spin, for much excitement.
  - text:
    - Let's make them swirl instead. We'll also add a title to our cassette.
    - And we'll put it on the SHELF!
  - text:
    - "Before we get going: make sure to record any unsaved changes."
    - The lesson will insert a blank cassette.
    - Click NEXT when you're ready.
    newGameOnNext: true
  - game: ''
    text:
    - Let's get started. Go to CODE. I'll load the squares for us.
  - text:
    - We need to give each square its own rotation angle.
    - For example, you could add 10 degrees per square, based on its position in the array.
    - "Like so:"
    screen: CODE
    game: |-
      init = state => {
        state.angle = 5 // the rotation angle
      }

      update = (state, input, elapsed) => {
        state.angle = state.angle + elapsed / 10
      }

      draw = (state) => {
        clear()
        const { angle } = state
        range(8).forEach(i => {
          const halfSide = 8 * i / 2
          const topLeft = [64 - halfSide, 64 - halfSide]
          const topRight = [64 + halfSide, 64 - halfSide]
          const bottomRight = [64 + halfSide, 64 + halfSide]
          const bottomLeft = [64 - halfSide, 64 + halfSide]
          const color = i % 7
          polyStroke([topLeft, topRight, bottomRight, bottomLeft], angle, color)
        })
      }
  - text:
    - This looks good. But each square needs to have the rotation angle based on its position AND time.
    - Let's create a function that does this.
    - We'll call it `getRotation`.
    linesToHighlight: 19-23
    screen: CODE
    game: |-
      REP18-18

          // add 10 degrees to each successive square.
          // e.g. the first square gets 0 new degrees, the second one gets 10,
          // the third one gets 20, etc.
          const customAngle = angle + i * 10
          polyStroke([topLeft, topRight, bottomRight, bottomLeft], customAngle, color)
  - text:
    - We also need a way to keep track of total time passed.
    - Let's add that to `init`.
    linesToHighlight: 4-8
    screen: CODE
    game: |-
      ADD3

      // given a number of milliseconds and square index,
      // returns the square's rotation
      const getRotation = (milliseconds, i) => {
        return milliseconds * i
      }
  - text:
    - And what good is this `totalElapsed` if we don't change it?
    - "Do that in `update`:"
    linesToHighlight: 1-1
    screen: CODE
    game: |-
      ADD1
        state.totalElapsed = 0 // total time passed
  - text:
    - How should we store each square's rotation?
    - A good place to do this is your game's state.
    - "Add a `rotations` array to `init`:"
    linesToHighlight: 12-12
    screen: CODE
    game: |-
      ADD12
        state.totalElapsed += elapsed
  - text:
    - "And finally, update the `rotations` array in `update`:"
    linesToHighlight: 2-2
    screen: CODE
    game: |-
      ADD2
        state.rotations = [] // each rectangle's individual rotation
  - text:
    - OK. Now we get to draw our squares.
    - Use `rotations` in `draw`. Each `polyStroke` call should reference this array instead of `angle`.
    linesToHighlight: 14-14
    screen: CODE
    game: |-
      REP14-14
        state.rotations = range(8).map(i => getRotation(state.totalElapsed, i))
  - text:
    - WOW! That is a bit too fast.
    - Adjust the calculations in `getRotation`.
    - "Divide by something, e.g. 50:"
    linesToHighlight: 31-32
    screen: CODE
    game: |-
      REP31-31
          const customAngle = state.rotations[i]
  - text:
    - Much better.
    - We should also get rid of `angle` in our state.
    - We don't need it anymore.
    linesToHighlight: 9-9
    screen: CODE
    game: |-
      REP9-9
        return milliseconds * i / 50
  - text:
    - Now, here's a neat trick.
    - "Use a sine function in `getRotation`:"
    linesToHighlight: 0-3
    screen: CODE
    game: |-
      DEL3
  - text:
    - This gives it more of an elastic swirly feel. Beautiful!
    - We need a title. Add it as the first line of your cassette.
    - I'll show you.
    linesToHighlight: 8-8
    screen: CODE
    game: |-
      REP8-8
        return Math.sin(milliseconds / 400) * 16 * (i + 1)
  - text:
    - Now try putting your cassette on the SHELF.
    - To do this, first record it by mousing over CASSETTE (on the top menu) and clicking RECORD.
    - Once that's done, mouse over CASSETTE and click PUT ON SHELF.
    linesToHighlight: 0-0
    screen: CODE
    game: |-
      REP0-0
      // title: Swirly squares

      init = state => {
  - text:
    - If everything went well (and why shouldn't it?) you'll see your cassette on the SHELF.
    - The SHELF is a good place to put your cassette for others to see.
    - Well, that's the end of this lesson. See you later!
- title: "Platformer pt. 1: basic movement"
  slides:
  - text:
    - In previous lessons we've learned to draw text and make squares move.
    - Exciting, no doubt.
    - But you're here to make games!
  - text:
    - It's about time we got to it.
    - In this lesson we'll learn how to make a little plumber move.
    - Now that is exciting.
  - text:
    - "Before we get going: make sure to record any unsaved changes."
    - The lesson will insert a blank cassette.
    - Click NEXT when you're ready.
    newGameOnNext: true
  - game: ''
    text:
    - First things first. Go to CODE.
    - Actually, no. Let's go to SPRITE instead (mouse over ART to find it).
    - We have to draw our plumber.
    requirements:
      screen: SPRITE
  - text:
    - To draw, click `+`, click a color, and then click (or drag) on the top-left grid.
    - To delete, click `-`, and then click (or drag) on the top-left grid.
    - Play for a bit, and then I'll draw something. Click NEXT.
    sprites:
      -
        index: 0
        array:
        - "        "
        - "        "
        - "        "
        - "        "
        - "        "
        - "        "
        - "        "
        - "        "
  - text:
    - Well isn't that cheerful.
    - You might have noticed 0-1-2-3 buttons under the `+` and `-`.
    - These are sprite flags. We'll discuss them in a future lesson.
    screen: SPRITE
    sprites:
      -
        index: 0
        array:
        - "        "
        - "  0  0  "
        - "  0  0  "
        - "        "
        - "        "
        - "0      0"
        - " 0    0 "
        - "  0000  "
  - text:
    - This smiley face is pleasant. But I promised a plumber.
    - Click NEXT.
    sprites:
      -
        index: 0
        array:
        - "        "
        - "  0  0  "
        - "  0  0  "
        - "        "
        - "        "
        - "0      0"
        - " 0    0 "
        - "  0000  "
  - text:
    - "Doesn't he look familiar? We'll call him Mr. M."
    - "By the way, these sprites are courtesy of <a class='text' href='https://twitter.com/johanvinet'>Johan Vinet</a>."
    - We also need something for Mr. M to stand on.
    screen: SPRITE
    sprites:
      -
        index: 0
        array:
        - "   2220 "
        - "   22222"
        - "  20270 "
        - "  200220"
        - "   2000 "
        - " 221331 "
        - "0 333351"
        - "  2   3 "
  - text:
    - I'll draw a rock sprite.
    sprites:
      -
        index: 32
        array:
        - "        "
        - "        "
        - "        "
        - "        "
        - "        "
        - "        "
        - "        "
        - "        "
  - text:
    - Feel free to edit these.
    - When you're ready, go to MAP.
    - You'll find it by mousing over ART.
    screen: SPRITE
    sprites:
      -
        index: 32
        array:
        - "22334334"
        - "24447445"
        - "34447447"
        - "34445447"
        - "35774334"
        - "23343445"
        - "34453447"
        - "47754777"
  - text:
    - To make a map, click a sprite, and then click (or drag) on the top-left grid.
    - Delete by first clicking on `-`, and then click (or drag) on the top-left grid.
    - Play for a bit. Then I'll try making a floor for our plumber.
    screen: MAP
    map: []
  - text:
    - Good. Now Mr. M has something to walk on.
    - Alright. We're done with sprites and maps. Time to make him move.
    - Go to CODE.
    screen: MAP
    map: [
      '15-0-32',
      '15-1-32',
      '15-2-32',
      '15-3-32',
      '15-4-32',
      '15-5-32',
      '15-6-32',
      '15-7-32',
      '15-8-32',
      '15-9-32',
      '15-10-32',
      '15-11-32',
      '15-12-32',
      '15-13-32',
      '15-14-32',
      '15-15-32'
    ]
  - text:
    - First, add a `draw` function. We covered this in previous lessons.
    - Don't remember? That's OK. I'll do it for you.
    - Click NEXT.
    screen: CODE
    game: ''
  - text:
    - Now we need to draw the map. Remember, the one with the floor?
    - "SCRIPT-8 has a function for this:"
    - XXmap()
    screen: CODE
    game: |-
      draw = state => {
        clear()
      }
  - text:
    - "`map` draws the map. Handy."
    - You can optionally pass it parameters, but we don't need that here.
    - Consult HELP for more information on `map` and other SCRIPT-8 functions.
    screen: CODE
    game: |-
      ADD2
        map()
  - text:
    - Time to draw the plumber.
    - "SCRIPT-8 has another function for this:"
    - XXsprite(x, y, spriteIndex)
  - text:
    - There is our plumber. But he's not in the right spot.
    - Can you make him stand on the floor?
    - "Tip: the number slider might make this easier."
    screen: CODE
    game: |-
      ADD3
        sprite(0, 0, 0)
  - text:
    - Good.
    - By the way, the third parameter in `sprite` is the sprite index.
    - Our plumber is the first sprite on the sprite list. Sprite 0.
    screen: CODE
    game: |-
      REP3
        sprite(0, 112, 0)
  - text:
    - This is good progress.
    - But what is a platformer without movement?
    - We need to respond to input (e.g. pressing the right key) and update the sprite's position.
    screen: CODE
    game: |-
      REP3
        sprite(0, 112, 0)
  - text:
    - In SCRIPT-8, the `update` function receives the current input.
    - Let's add that next.
  - text:
    - Time to add input-handling code.
    - If left is pressed, move the charac... wait a second.
    - The plumber is being drawn to (0, 112).
    - Shouldn't we fix that first?
    screen: CODE
    game: |-
      REP0-0
      update = (state, input) => {

      }

      draw = state => {
  - text:
    - Yes, we should. Let's add `init` so we can track the plumber's state there.
    - "Like so:"
  - text:
    - And update `draw` so it uses state instead of the hardcoded numbers.
    screen: CODE
    game: |-
      REP0-0
      init = state => {
        state.x = 0
        state.y = 112
      }

      update = (state, input) => {
  - text:
    - Now for the final part. In the `update` function, `input` is an object that contains various booleans indicating if keys are pressed.
    - For example, `input.left` will be true if the left key is pressed, etc.
    - Let's first add logic to handle left and right keys.
    screen: CODE
    game: |-
      REP12
        sprite(state.x, state.y, 0)
  - text:
    - And now we can update state appropriately. If left is pressed, decrease x by 1.
    - And if right is pressed, well, you get the idea.
    screen: CODE
    game: |-
      REP6
        if (input.left) {

        }

        if (input.right) {

        }
  - text:
    - Click on the game (or click RUN if you can't see it).
    - And press the left or right keys.
    - The plumber moves!
    screen: CODE
    game: |-
      REP6-12
        if (input.left) {
          state.x -= 1
        }

        if (input.right) {
          state.x += 1
        }
  - text:
    - One last thing.
    - Pressing left makes Mr. M move back, but he's facing forward.
    - That isn't right.
  - text:
    - "Fortunately for us, `sprite` has three optional parameters:"
    - XXsprite(x, y, spriteIndex, [brighten, flipH, flipV])
    - "`brighten` brightens or darkens the sprite. `flipH` flips it horizontally. `flipV` flips it vertically."
  - text:
    - First, we should add `flipH` to `init`. We need to keep track of it somehow.
    screen: CODE
  - text:
    - Next, update the input-handling code.
    - If left is pressed, set flipH to true.
    - If right is pressed, set flipH to false.
    screen: CODE
    game: |-
      REP2
        state.y = 112
        state.flipH = false
  - text:
    - Finally, change the sprite call.
    - Remember to ignore `brighten` for now (the fourth parameter).
    screen: CODE
    game: |-
      REP7-13
        if (input.left) {
          state.x -= 1
          state.flipH = true
        }

        if (input.right) {
          state.x += 1
          state.flipH = false
        }
  - text:
    - And there you have it. Our plumber faces the right direction.
    - Exciting!
    screen: CODE
    game: |-
      REP21
        sprite(state.x, state.y, 0, 0, state.flipH)
  - text:
    - This has been a long lesson, mostly because I like the sight of my own words.
    - But pause for a second and look at the amount of code required to make our plumber move.
    - Not that much.
  - text:
    - See you in the next lesson!
- title: "Platformer pt. 2: walking animation"
  slides:
  - text:
    - In the previous lesson we drew Mr. M, our plumber.
    - A solid first platformer lesson.
    - Shall we do more?
  - text:
    - "Before we get going: make sure to record any unsaved changes."
    - The lesson will insert a blank cassette.
    - Click NEXT when you're ready.
    newGameOnNext: true
  - game: ''
    text:
    - OK. As I was saying, we made Mr. M move.
    - He's a fast walker.
    - Very fast. I'll load up last lesson's code to explain.
  - text:
    - Click on the game in the preview window (or go to RUN if you can't see it).
    - And move a bit. Press left, then right.
    - Fast walker huh? He's so fast, his legs... don't move! They glide!
    screen: CODE
    map: [
      '15-0-32',
      '15-1-32',
      '15-2-32',
      '15-3-32',
      '15-4-32',
      '15-5-32',
      '15-6-32',
      '15-7-32',
      '15-8-32',
      '15-9-32',
      '15-10-32',
      '15-11-32',
      '15-12-32',
      '15-13-32',
      '15-14-32',
      '15-15-32'
    ]
    sprites:
      -
        index: 0
        array:
        - "   2220 "
        - "   22222"
        - "  20270 "
        - "  200220"
        - "   2000 "
        - " 221331 "
        - "0 333351"
        - "  2   3 "
      -
        index: 32
        array:
        - "22334334"
        - "24447445"
        - "34447447"
        - "34445447"
        - "35774334"
        - "23343445"
        - "34453447"
        - "47754777"
    game: |-
      init = state => {
        state.x = 0
        state.y = 112
        state.flipH = false
      }

      update = (state, input) => {
        if (input.left) {
          state.x -= 1
          state.flipH = true
        }

        if (input.right) {
          state.x += 1
          state.flipH = false
        }
      }

      draw = state => {
        clear()
        map()
        sprite(state.x, state.y, 0, 0, state.flipH)
      }
  - text:
    - We're using the same sprite whether he's standing or walking.
    - That's a problem.
    - We need to draw a set of walking sprites.
  - screen: SPRITE
    text:
    - You can try for a bit. But I'll do it for us.
    - You knew that was coming, right?
    - Click NEXT.
  - text:
    - Here are our 6 walking sprites.
    - Beautiful.
    - "By the way, these sprites are courtesy of <a class='text' href='https://twitter.com/johanvinet'>Johan Vinet</a>."
    screen: SPRITE
    sprites:
      -
        index: 1
        array:
        - "   2220 "
        - "   22222"
        - "  20270 "
        - "  200220"
        - "   2000 "
        - "  22135 "
        - "  20335 "
        - "   223  "
      -
        index: 2
        array:
        - "   2222 "
        - "   22222"
        - "  22027 "
        - "  220022"
        - "   2200 "
        - "  32215 "
        - "  33220 "
        - "  2  3  "
      -
        index: 3
        array:
        - "   2222 "
        - "   22222"
        - "  22027 "
        - "  220022"
        - "   2200 "
        - "  322150"
        - " 233322 "
        - "      3 "
      -
        index: 4
        array:
        - "   2220 "
        - "   22222"
        - "  20270 "
        - "  200220"
        - "   2000 "
        - "  22135 "
        - "  20335 "
        - "   223  "
      -
        index: 5
        array:
        - "   2202 "
        - "   22222"
        - "  02707 "
        - "  002202"
        - "   0000 "
        - " 221331 "
        - "0 333351"
        - "  3  2  "
      -
        index: 6
        array:
        - "   2202 "
        - "   22222"
        - "  02707 "
        - "  002202"
        - " 220000 "
        - "0 213310"
        - " 333335 "
        - "      2 "
  - text:
    - OK. We now have 1 standing sprite and 6 walking sprites.
    - We'll need to track what sprite to draw.
    - "Let's add `sprite` to `init`."
    screen: CODE
  - text:
    - Good. And we might as well update our `draw` function.
    - Use `state.sprite` in the `sprite()` call.
    linesToHighlight: 3-3
    game: |-
      ADD3
        state.sprite = 0
    screen: CODE
  - text:
    - Now for the interesting part.
    - If we're pressing left or right we'll use the walking sprites.
    linesToHighlight: 22-22
    screen: CODE
    game: |-
      REP22
        sprite(state.x, state.y, state.sprite, 0, state.flipH)
  - text:
    - And if we're not pressing either left or right we'll use the standing sprite.
    linesToHighlight: 18-20
    screen: CODE
    game: |-
      REP16
        }

        if (input.left || input.right) {
          state.sprite = 1
        }
  - text:
    - OK let's try it.
    - Click on the preview screen and move our plumber (or go to RUN).
    - Does it look right?
    linesToHighlight: 21-21
    screen: CODE
    game: |-
      REP20
        } else {
          state.sprite = 0
        }
  - text:
    - That was a trick question. It doesn't look right.
    - Mr. M is still gliding because we are not cycling through the walking sprites.
  - text:
    - When he starts walking we should use sprite 1.
    - Then the next time we execute the `draw` function we should use sprite 2.
    - And so on until we reach the end of the walking sprites.
  - text:
    - At that point, if we're still walking, we'll go back to sprite 1.
    - And continue cycling through.
  - text:
    - I hope this makes sense to you.
    - OK then!
    - First we need to make an array of the walking sprites.
  - text:
    - Next add a `counter` to `init`.
    screen: CODE
    linesToHighlight: 7-7
    game: |-
      REP5-7
      }

      const walkCycle = [1, 2, 3, 4, 5, 6]

      update = (state, input) => {
  - text:
    - We'll increment this every time we're walking.
    - Watch line 24.
    linesToHighlight: 4-4
    screen: CODE
    game: |-
      ADD4
        state.counter = 0
  - text:
    - If we stop walking, we'll reset the counter to 0.
    screen: CODE
    linesToHighlight: 23-23
    game: |-
      ADD23
          state.counter++
  - text:
    - Finally, if we're walking, use the counter to set the sprite.
    - I'll do this in line 23.
    - Notice the use of modulus arithmetic.
    linesToHighlight: 26-26
    screen: CODE
    game: |-
      ADD26
          state.counter = 0
  - text:
    - Time to test it.
    - Click on the preview screen and make Mr. M move.
    - What do you think?
    linesToHighlight: 22-22
    screen: CODE
    game: |-
      REP22
          state.sprite = walkCycle[state.counter % 6]
  - text:
    - It worked!
    - But... his legs are moving way too fast.
    - We're cycling through the walking sprites too fast.
  - text:
    - This is an easy fix.
    - Let's a create a `slowCounter`.
    - I'll put it right above the modulus arithmetic line.
  - text:
    - Next we'll use it in the line below.
    linesToHighlight: 22-22
    screen: CODE
    game: |-
      ADD22
          const slowCounter = state.counter
  - text:
    - And finally, time to slooow the counter.
    - Divide by something and make sure to round the number down.
    - We need `slowCounter` to stay an integer.
    screen: CODE
    linesToHighlight: 23-23
    game: |-
      REP23
          state.sprite = walkCycle[slowCounter % 6]
  - text:
    - Try it.
    - Not bad!
    linesToHighlight: 22-22
    screen: CODE
    game: |-
      REP22
          const slowCounter = Math.floor(state.counter / 5)
  - text:
    - There you have it, a walking animation.
    - It wouldn't do to have a gliding plumber. Nope.
    - See you next time!
- title: "Platformer pt. 3: jumping (coming soon)"
  slides:
  - text:
    - Coming soon.
- title: "Platformer pt. 4: wall collisions (coming soon)"
  slides:
  - text:
    - Coming soon.
- title: "Platformer pt. 5: camera (coming soon)"
  slides:
  - text:
    - Coming soon.
